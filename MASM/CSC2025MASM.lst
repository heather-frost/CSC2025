Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/03/24 10:31:20
fibonacci.asm						     Page 1 - 1


				; Main Console program
				; Spencer Medberry
				; 27 September 2024
				; fibonacci counter built from start.asm
				; Revised: SAM 10/12/2024 updated based on feedback
				; Revised: SAM 10/16/2024 added input checking and final dialog

				; Register usage:
				;     EAX - readWrite procedure communication, fibonacci sum
				;     EBX - integer user input result for term counting
				;     ECX - helper register: char storage during ASCII conversion, lesser fibonacci addend

				.model flat

				extern writeline: near
				extern readline: near
				extern charCount: near
				extern writeNumber: near

 00000000			.data

				; both end with 0 to terminate the string
 00000000 48 6F 77 20 6D	prompt              byte  "How many fibonacci terms would you like? Enter a number between 1 and 45: ", 0
	   61 6E 79 20 66
	   69 62 6F 6E 61
	   63 63 69 20 74
	   65 72 6D 73 20
	   77 6F 75 6C 64
	   20 79 6F 75 20
	   6C 69 6B 65 3F
	   20 45 6E 74 65
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 62 65 74 77
	   65 65 6E 20 31
	   20 61 6E 64 20
	   34 35 3A 20 00
				; beginning with 10 sends a line feed character before the text
 0000004B 0A 53 74 61 72	fibonacciDialog     byte  10,"Starting with 1 and 2, the terms produced are: ",0
	   74 69 6E 67 20
	   77 69 74 68 20
	   31 20 61 6E 64
	   20 32 2C 20 74
	   68 65 20 74 65
	   72 6D 73 20 70
	   72 6F 64 75 63
	   65 64 20 61 72
	   65 3A 20 00
 0000007C 50 6C 65 61 73	termSizeErrorMsg    byte  "Please enter a term between 1 and 45.",10,10,0
	   65 20 65 6E 74
	   65 72 20 61 20
	   74 65 72 6D 20
	   62 65 74 77 65
	   65 6E 20 31 20
	   61 6E 64 20 34
	   35 2E 0A 0A 00
 000000A4 0A 0A 50 72 65	endingPauseDialog     byte  10,10,"Press return to exit.",0
	   73 73 20 72 65
	   74 75 72 6E 20
	   74 6F 20 65 78
	   69 74 2E 00
 000000BC 0A 0A 54 68 65	finalTerm           byte  10,10,"The value of term ",0
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 65 72 6D 20
	   00
 000000D1 69 73 20		finalDialog         byte  "is "

 00000000			.code

				;; Call fibonacci() - No Parameters, no return value
 00000000			fibonacci PROC near
 00000000			_fibonacci:
				    ; Display prompt for user input
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 00000000  68 00000000 R	    push  offset prompt
 00000005  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 0000000A  50			    push  eax
 0000000B  68 00000000 R	    push  offset prompt
 00000010  E8 00000000 E	    call  writeline

				    ; ask console for user input
				        ;; Call readline() - No Parameters, Returns ptr to buffer in eax
 00000015  E8 00000000 E	    call  readline
				    ; user input stored in eax
				    
				    ;convert user input from ASCII to integer
 0000001A  B9 00000000		    mov   ecx,0
 0000001F  BB 00000000		    mov   ebx,0
 00000024			ASCIIloop:
 00000024  8A 08		    mov  cl,[eax]                   ; Look at the character in the string
 00000026  83 F9 0D		    cmp  ecx,13                     ; check for carriage return.
 00000029  74 15		    je numberGet
 0000002B  83 F9 0A		    cmp  ecx,10                     ; check for line feed.
 0000002E  74 10		    je numberGet
 00000030  83 F9 00		    cmp  ecx,0                      ; check for end of string.
 00000033  74 0B		    je numberGet
 00000035  80 E9 30		    sub  cl,'0'
 00000038  6B DB 0A		    imul ebx,10
 0000003B  03 D9		    add  ebx,ecx
 0000003D  40			    inc  eax                        ; go to next letter
 0000003E  EB E4		    jmp  ASCIIloop
 00000040			numberGet:
 00000040  83 FB 2D		    cmp ebx,45
 00000043  0F 8F 00000093	    jg termSizeError
 00000049  83 FB 01		    cmp ebx,1
 0000004C  0F 8C 0000008A	    jl termSizeError
 00000052  53			    push ebx
				    

				    ; Print fibonacciDialog dialog
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 00000053  68 0000004B R	    push  offset fibonacciDialog
 00000058  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 0000005D  50			    push  eax
 0000005E  68 0000004B R	    push  offset fibonacciDialog
 00000063  E8 00000000 E	    call  writeline

				    ;prep registers for addloop
 00000068  5B			    pop ebx
 00000069  B8 00000002		    mov   eax, 2
 0000006E  B9 00000001		    mov   ecx, 1
 00000073  53			    push ebx

				    ;addloop adds eax and ecx to get the next term in the fibonacci sequence and also prints it to the console
 00000074			addloop:
				    ;add function
 00000074  50			    push  eax
 00000075  03 C1		    add   eax, ecx
 00000077  59			    pop   ecx

				    ;store registers
 00000078  50			    push  eax
 00000079  51			    push  ecx
 0000007A  53			    push  ebx

				    ;writeNumber
				        ;; Call writeNumber(number) - print the ASCII value of a number.
				        ;; Parameter: number is number to be converted to Ascii and printed.
				        ;; Returns nothing
 0000007B  50			    push  eax
 0000007C  E8 00000000 E	    call  writeNumber

				    ;retrieve registers
 00000081  5B			    pop   ebx
 00000082  59			    pop   ecx
 00000083  58			    pop   eax

				    ;loopy bit
 00000084  4B			    dec ebx
 00000085  83 FB 00		    cmp ebx,0
 00000088  7F EA		    jg  addloop
				;End addloop

				;Ending dialog
 0000008A  5B			    pop ebx
 0000008B  50			    push eax    ;2nd writeNumber parameter
 0000008C  53			    push ebx    ;1st writeNumber parameter
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 0000008D  68 000000BC R	    push  offset finalTerm
 00000092  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 00000097  50			    push  eax
 00000098  68 000000BC R	    push  offset finalTerm
 0000009D  E8 00000000 E	    call  writeline
				        ;; Call writeNumber(number) - print the ASCII value of a number.
				        ;; Parameter: number is number to be converted to Ascii and printed.
				        ;; Returns nothing
 000000A2  E8 00000000 E	    call  writeNumber
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 000000A7  68 000000D1 R	    push  offset finalDialog
 000000AC  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 000000B1  50			    push  eax
 000000B2  68 000000D1 R	    push  offset finalDialog
 000000B7  E8 00000000 E	    call  writeline
				        ;; Call writeNumber(number) - print the ASCII value of a number.
				        ;; Parameter: number is number to be converted to Ascii and printed.
				        ;; Returns nothing
 000000BC  E8 00000000 E	    call  writeNumber


 000000C1			exit:
				    ; Display prompt for user input
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 000000C1  68 000000A4 R	    push  offset endingPauseDialog
 000000C6  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 000000CB  50			    push  eax
 000000CC  68 000000A4 R	    push  offset endingPauseDialog
 000000D1  E8 00000000 E	    call  writeline
				        ;; Call readline() - No Parameters, Returns ptr to buffer in eax
 000000D6  E8 00000000 E	    call  readline
 000000DB  C3			    ret     ; Return to the main program.

 000000DC			termSizeError:
				    ; Print termSizeErrorMsg
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 000000DC  68 0000007C R	    push  offset termSizeErrorMsg
 000000E1  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 000000E6  50			    push  eax
 000000E7  68 0000007C R	    push  offset termSizeErrorMsg
 000000EC  E8 00000000 E	    call  writeline
 000000F1  E9 FFFFFF0A		    jmp _fibonacci
				; End termSizeError
				    
 000000F6			fibonacci ENDP
				END
Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/03/24 10:31:20
fibonacci.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000000D4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000F6 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

fibonacci  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F6 Public
  _fibonacci . . . . . . . . . .	L Near	 00000000 _TEXT	
  ASCIIloop  . . . . . . . . . .	L Near	 00000024 _TEXT	
  numberGet  . . . . . . . . . .	L Near	 00000040 _TEXT	
  addloop  . . . . . . . . . . .	L Near	 00000074 _TEXT	
  exit . . . . . . . . . . . . .	L Near	 000000C1 _TEXT	
  termSizeError  . . . . . . . .	L Near	 000000DC _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
charCount  . . . . . . . . . . .	L Near	 00000000 FLAT	External
endingPauseDialog  . . . . . . .	Byte	 000000A4 _DATA	
fibonacciDialog  . . . . . . . .	Byte	 0000004B _DATA	
finalDialog  . . . . . . . . . .	Byte	 000000D1 _DATA	
finalTerm  . . . . . . . . . . .	Byte	 000000BC _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000000 _DATA	
readline . . . . . . . . . . . .	L Near	 00000000 FLAT	External
termSizeErrorMsg . . . . . . . .	Byte	 0000007C _DATA	
writeNumber  . . . . . . . . . .	L Near	 00000000 FLAT	External
writeline  . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
