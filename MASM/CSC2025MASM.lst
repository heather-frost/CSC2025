Microsoft (R) Macro Assembler Version 14.35.32215.0	    10/07/24 11:54:01
fibonacci.asm						     Page 1 - 1


				; Main Console program
				; Spencer Medberry
				; 27 September 2024
				; fibonacci counter built from start.asm

				; Register names:
				;     EAX - Caller saved register - used for addend
				;     EBX - Caller saved register - used for sum
				;     ECX - Caller saved register - Counter register 
				;     EDX - Caller saved register - data
				;     ESI - Callee Saved register - Source Index
				;     EDI - Callee Saved register - Destination Index
				;     ESP - Callee Saved register - stack pointer
				;     EBP - Callee Saved register - base pointer.386P

				.model flat

				extern writeline: near
				extern readline: near
				extern charCount: near
				extern writeNumber: near

 00000000			.data

 00000000 48 6F 77 20 6D	prompt          byte  "How many fibonacci terms would you like? Enter a number between 1 and 45: ", 0 ; ends with string terminator (NULL or 0)
	   61 6E 79 20 66
	   69 62 6F 6E 61
	   63 63 69 20 74
	   65 72 6D 73 20
	   77 6F 75 6C 64
	   20 79 6F 75 20
	   6C 69 6B 65 3F
	   20 45 6E 74 65
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 62 65 74 77
	   65 65 6E 20 31
	   20 61 6E 64 20
	   34 35 3A 20 00
 0000004B 0A 53 74 61 72	numberPrint     byte  10,"Starting with 1 and 2, the terms produced are: ",0
	   74 69 6E 67 20
	   77 69 74 68 20
	   31 20 61 6E 64
	   20 32 2C 20 74
	   68 65 20 74 65
	   72 6D 73 20 70
	   72 6F 64 75 63
	   65 64 20 61 72
	   65 3A 20 00
 0000007C 0A 54 68 65 20	results         byte  10,"The number of terms that will be displayed is: ", 0
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   74 65 72 6D 73
	   20 74 68 61 74
	   20 77 69 6C 6C
	   20 62 65 20 64
	   69 73 70 6C 61
	   79 65 64 20 69
	   73 3A 20 00
 000000AD 00000400		numCharsToRead  dword 1024
 000000B1 00000000		bufferAddr      dword ?

 00000000			.code

				; Library calls used for input from and output to the console; This is the entry procedure that does all of the testing.
 00000000			fibonacci PROC near
 00000000			_fibonacci:
				    ; Type a prompt for the user
				    ; WriteConsole(handle, &Prompt[0], 17, &written, 0)
 00000000  68 00000000 R	    push  offset prompt
 00000005  E8 00000000 E	    call  charCount
 0000000A  50			    push  eax
 0000000B  68 00000000 R	    push  offset prompt
 00000010  E8 00000000 E	    call  writeline

				    ; Read what the user entered.
 00000015  E8 00000000 E	    call  readline
				    
				    ;convert user entry to number
 0000001A  A3 000000B1 R	    mov   bufferAddr, eax
 0000001F  8B 1D 000000B1 R	    mov   ebx, bufferAddr
 00000025  B9 00000000		    mov   ecx,0
 0000002A  B8 00000000		    mov   eax,0
 0000002F			ASCIIloop:
 0000002F  8A 0B		    mov  cl,[ebx]                   ; Look at the character in the string
 00000031  83 F9 0D		    cmp  ecx,13                     ; check for carriage return.
 00000034  74 15		    je numberGet
 00000036  83 F9 0A		    cmp  ecx,10                     ; check for line feed.
 00000039  74 10		    je numberGet
 0000003B  83 F9 00		    cmp  ecx,0                      ; check for end of string.
 0000003E  74 0B		    je numberGet
 00000040  80 E9 30		    sub  cl,'0'
 00000043  6B C0 0A		    imul eax,10
 00000046  03 C1		    add  eax,ecx
 00000048  43			    inc  ebx                        ; go to next letter
 00000049  EB E4		    jmp  ASCIIloop
 0000004B			numberGet:
 0000004B  50			    push eax

				    ; Print numberPrint dialog
 0000004C  68 0000004B R	    push  offset numberPrint
 00000051  E8 00000000 E	    call  charCount
 00000056  50			    push  eax
 00000057  68 0000004B R	    push  offset numberPrint
 0000005C  E8 00000000 E	    call  writeline

				    ;prep registers for addloop
 00000061  59			    pop ecx
 00000062  B8 00000002		    mov   eax, 2
 00000067  BB 00000001		    mov   ebx, 1
				;    mov   ecx, 10

 0000006C			addloop:
				    ;add function
 0000006C  50			    push  eax
 0000006D  03 C3		    add   eax, ebx
 0000006F  5B			    pop   ebx

				    ;store registers
 00000070  50			    push  eax
 00000071  53			    push  ebx
 00000072  51			    push  ecx

				    ;writeNumber
 00000073  50			    push  eax
 00000074  E8 00000000 E	    call  writeNumber

				    ;retrieve registers
 00000079  59			    pop   ecx
 0000007A  5B			    pop   ebx
 0000007B  58			    pop   eax

				    ;loopy bit
 0000007C  49			    dec ecx
 0000007D  83 F9 00		    cmp ecx,0
 00000080  7F EA		    jg  addloop

 00000082			exit:
 00000082  C3			    ret                                     ; Return to the main program.
 00000083			fibonacci ENDP
				END
Microsoft (R) Macro Assembler Version 14.35.32215.0	    10/07/24 11:54:01
fibonacci.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000000B5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000083 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

fibonacci  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000083 Public
  _fibonacci . . . . . . . . . .	L Near	 00000000 _TEXT	
  ASCIIloop  . . . . . . . . . .	L Near	 0000002F _TEXT	
  numberGet  . . . . . . . . . .	L Near	 0000004B _TEXT	
  addloop  . . . . . . . . . . .	L Near	 0000006C _TEXT	
  exit . . . . . . . . . . . . .	L Near	 00000082 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
bufferAddr . . . . . . . . . . .	DWord	 000000B1 _DATA	
charCount  . . . . . . . . . . .	L Near	 00000000 FLAT	External
numCharsToRead . . . . . . . . .	DWord	 000000AD _DATA	
numberPrint  . . . . . . . . . .	Byte	 0000004B _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000000 _DATA	
readline . . . . . . . . . . . .	L Near	 00000000 FLAT	External
results  . . . . . . . . . . . .	Byte	 0000007C _DATA	
writeNumber  . . . . . . . . . .	L Near	 00000000 FLAT	External
writeline  . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
