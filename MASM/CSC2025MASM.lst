Microsoft (R) Macro Assembler Version 14.41.34120.0	    10/01/24 16:34:20
fibonacci.asm						     Page 1 - 1


				; Main Console program
				; Spencer Medberry
				; 27 September 2024
				; fibonacci counter built from start.asm
				; Register names:
				; Register names are NOT case sensitive eax and EAX are the same register
				; x86 uses 8 registers. EAX (Extended AX register has 32 bits while AX is
				;	the right most 16 bits of EAX). AL is the right-most 8 bits.
				; Writing into AX or AL effects the right most bits of EAX.
				;     EAX - caller saved register - usually used for communication between
				;			caller and callee.
				;     EBX - Callee saved register
				;     ECX - Caller saved register - Counter register 
				;     EDX - Caller Saved register - data, I use it for saving and restoring
				;			the return address
				;     ESI - Callee Saved register - Source Index
				;     EDI - Callee Saved register - Destination Index
				;     ESP - Callee Saved register - stack pointer
				;     EBP - Callee Saved register - base pointer.386P

				.model flat

				extern writeline: near
				extern readline: near
				extern charCount: near
				extern writeNumber: near

 00000000			.data

 00000000 50 6C 65 61 73	prompt          byte  "Please type your name: ", 0 ; ends with string terminator (NULL or 0)
	   65 20 74 79 70
	   65 20 79 6F 75
	   72 20 6E 61 6D
	   65 3A 20 00
 00000018 0A 59 6F 75 20	results         byte  10,"You typed: ", 0
	   74 79 70 65 64
	   3A 20 00
 00000025 0A 54 68 65 20	numberPrint     byte  10,"The number is: ",0
	   6E 75 6D 62 65
	   72 20 69 73 3A
	   20 00
 00000036 00000001		addend1         dword 1
 0000003A 00000002		addend2         dword 2
 0000003E 00000400		numCharsToRead  dword 1024
 00000042 00000000		bufferAddr      dword ?

 00000000			.code

				; Library calls used for input from and output to the console; This is the entry procedure that does all of the testing.
 00000000			fibonacci PROC near
 00000000			_fibonacci:
				    ; Type a prompt for the user
				    ; WriteConsole(handle, &Prompt[0], 17, &written, 0)
 00000000  68 00000000 R	    push  offset prompt
 00000005  E8 00000000 E	    call  charCount
 0000000A  50			    push  eax
 0000000B  68 00000000 R	    push  offset prompt
 00000010  E8 00000000 E	    call  writeline

				    ; Read what the user entered.
 00000015  E8 00000000 E	    call  readline

				    ; The following embeds the above code in a common routine, so the more complicated call only needs to be written once.
				    ; writeline(&results[0], 12)
 0000001A  A3 00000042 R	    mov   bufferAddr, eax
 0000001F  68 00000018 R	    push  offset results
 00000024  E8 00000000 E	    call  charCount
 00000029  50			    push  eax
 0000002A  68 00000018 R	    push  offset results
 0000002F  E8 00000000 E	    call  writeline
 00000034  FF 35 0000003E R	    push  numCharsToRead
 0000003A  FF 35 00000042 R	    push  bufferAddr
 00000040  E8 00000000 E	    call  writeline

				    ; Try print a number
 00000045  68 00000025 R	    push  offset numberPrint
 0000004A  E8 00000000 E	    call  charCount
 0000004F  50			    push  eax
 00000050  68 00000025 R	    push  offset numberPrint
 00000055  E8 00000000 E	    call  writeline
 0000005A  A1 00000036 R	    mov   eax, addend1
 0000005F  50			    push  eax
 00000060  E8 00000000 E	    call  writeNumber
 00000065  A1 0000003A R	    mov   eax, addend2
 0000006A  50			    push  eax
 0000006B  E8 00000000 E	    call  writeNumber
 00000070  A1 0000003A R	    mov   eax, addend2
 00000075  A1 00000036 R	    mov   eax, addend1
 0000007A  50			    push  eax
 0000007B  E8 00000000 E	    call  writeNumber

 00000080			exit:
 00000080  C3			    ret                                     ; Return to the main program.

 00000081			fibonacci ENDP

 00000081			fprogress PROC near
 00000081			_fprogress:

 00000081  C3			    ret
 00000082			fprogress ENDP

				END
Microsoft (R) Macro Assembler Version 14.41.34120.0	    10/01/24 16:34:20
fibonacci.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000046 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000082 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

fibonacci  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000081 Public
  _fibonacci . . . . . . . . . .	L Near	 00000000 _TEXT	
  exit . . . . . . . . . . . . .	L Near	 00000080 _TEXT	
fprogress  . . . . . . . . . . .	P Near	 00000081 _TEXT	Length= 00000001 Public
  _fprogress . . . . . . . . . .	L Near	 00000081 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
addend1  . . . . . . . . . . . .	DWord	 00000036 _DATA	
addend2  . . . . . . . . . . . .	DWord	 0000003A _DATA	
bufferAddr . . . . . . . . . . .	DWord	 00000042 _DATA	
charCount  . . . . . . . . . . .	L Near	 00000000 FLAT	External
numCharsToRead . . . . . . . . .	DWord	 0000003E _DATA	
numberPrint  . . . . . . . . . .	Byte	 00000025 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000000 _DATA	
readline . . . . . . . . . . . .	L Near	 00000000 FLAT	External
results  . . . . . . . . . . . .	Byte	 00000018 _DATA	
writeNumber  . . . . . . . . . .	L Near	 00000000 FLAT	External
writeline  . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
