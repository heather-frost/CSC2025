Microsoft (R) Macro Assembler Version 14.35.32215.0	    10/02/24 11:05:09
fibonacci.asm						     Page 1 - 1


				; Main Console program
				; Spencer Medberry
				; 27 September 2024
				; fibonacci counter built from start.asm

				; Register names:
				; Register names are NOT case sensitive eax and EAX are the same register
				; x86 uses 8 registers. EAX (Extended AX register has 32 bits while AX is
				;	the right most 16 bits of EAX). AL is the right-most 8 bits.
				; Writing into AX or AL effects the right most bits of EAX.
				;     EAX - caller saved register - usually used for communication between
				;			caller and callee.
				;     EBX - Callee saved register
				;     ECX - Caller saved register - Counter register 
				;     EDX - Caller Saved register - data, I use it for saving and restoring
				;			the return address
				;     ESI - Callee Saved register - Source Index
				;     EDI - Callee Saved register - Destination Index
				;     ESP - Callee Saved register - stack pointer
				;     EBP - Callee Saved register - base pointer.386P

				.model flat

				extern writeline: near
				extern readline: near
				extern charCount: near
				extern writeNumber: near

 00000000			.data

 00000000 48 6F 77 20 6D	prompt          byte  "How many fibonacci terms would you like? Enter a number between 0 and 45: ", 0 ; ends with string terminator (NULL or 0)
	   61 6E 79 20 66
	   69 62 6F 6E 61
	   63 63 69 20 74
	   65 72 6D 73 20
	   77 6F 75 6C 64
	   20 79 6F 75 20
	   6C 69 6B 65 3F
	   20 45 6E 74 65
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 62 65 74 77
	   65 65 6E 20 30
	   20 61 6E 64 20
	   34 35 3A 20 00
 0000004B 0A 59 6F 75 20	results         byte  10,"You typed: ", 0
	   74 79 70 65 64
	   3A 20 00
 00000058 0A 53 74 61 72	numberPrint     byte  10,"Starting with 1 and 2, the terms produced are: ",0
	   74 69 6E 67 20
	   77 69 74 68 20
	   31 20 61 6E 64
	   20 32 2C 20 74
	   68 65 20 74 65
	   72 6D 73 20 70
	   72 6F 64 75 63
	   65 64 20 61 72
	   65 3A 20 00
 00000089 00000001		addend1         dword 1
 0000008D 00000002		addend2         dword 2
 00000091 00000400		numCharsToRead  dword 1024
 00000095 00000000		bufferAddr      dword ?

 00000000			.code

				; Library calls used for input from and output to the console; This is the entry procedure that does all of the testing.
 00000000			fibonacci PROC near
 00000000			_fibonacci:
				    ; Type a prompt for the user
				    ; WriteConsole(handle, &Prompt[0], 17, &written, 0)
 00000000  68 00000000 R	    push  offset prompt
 00000005  E8 00000000 E	    call  charCount
 0000000A  50			    push  eax
 0000000B  68 00000000 R	    push  offset prompt
 00000010  E8 00000000 E	    call  writeline

				    ; Read what the user entered.
 00000015  E8 00000000 E	    call  readline

				    ; The following embeds the above code in a common routine, so the more complicated call only needs to be written once.
				    ; writeline(&results[0], 12)
 0000001A  A3 00000095 R	    mov   bufferAddr, eax
 0000001F  68 0000004B R	    push  offset results
 00000024  E8 00000000 E	    call  charCount
 00000029  50			    push  eax
 0000002A  68 0000004B R	    push  offset results
 0000002F  E8 00000000 E	    call  writeline
 00000034  FF 35 00000091 R	    push  numCharsToRead
 0000003A  FF 35 00000095 R	    push  bufferAddr
 00000040  E8 00000000 E	    call  writeline

				    ; Try print a number
 00000045  E8 00000001		    call fprogress

 0000004A			exit:
 0000004A  C3			    ret                                     ; Return to the main program.

 0000004B			fibonacci ENDP

 0000004B			fprogress PROC near
 0000004B			_fprogress:
 0000004B  68 00000058 R	push  offset numberPrint
 00000050  E8 00000000 E	    call  charCount
 00000055  50			    push  eax
 00000056  68 00000058 R	    push  offset numberPrint
 0000005B  E8 00000000 E	    call  writeline
 00000060  A1 00000089 R	    mov   eax, addend1
 00000065  50			    push  eax
 00000066  E8 00000000 E	    call  writeNumber
 0000006B  A1 0000008D R	    mov   eax, addend2
 00000070  50			    push  eax
 00000071  E8 00000000 E	    call  writeNumber
 00000076  A1 00000089 R	    mov   eax, addend1
 0000007B  03 05 0000008D R	    add   eax, addend2
 00000081  A3 0000008D R	    mov   addend2, eax
 00000086  50			    push  eax
 00000087  E8 00000000 E	    call  writeNumber
 0000008C  A1 0000008D R	    mov   eax, addend2
 00000091  2B 05 00000089 R	    sub   eax, addend1
 00000097  A3 00000089 R	    mov   addend1, eax
 0000009C  50			    push  eax
 0000009D  E8 00000000 E	    call  writeNumber
 000000A2  C3			    ret
 000000A3			fprogress ENDP

				END
Microsoft (R) Macro Assembler Version 14.35.32215.0	    10/02/24 11:05:09
fibonacci.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000099 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000A3 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

fibonacci  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004B Public
  _fibonacci . . . . . . . . . .	L Near	 00000000 _TEXT	
  exit . . . . . . . . . . . . .	L Near	 0000004A _TEXT	
fprogress  . . . . . . . . . . .	P Near	 0000004B _TEXT	Length= 00000058 Public
  _fprogress . . . . . . . . . .	L Near	 0000004B _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
addend1  . . . . . . . . . . . .	DWord	 00000089 _DATA	
addend2  . . . . . . . . . . . .	DWord	 0000008D _DATA	
bufferAddr . . . . . . . . . . .	DWord	 00000095 _DATA	
charCount  . . . . . . . . . . .	L Near	 00000000 FLAT	External
numCharsToRead . . . . . . . . .	DWord	 00000091 _DATA	
numberPrint  . . . . . . . . . .	Byte	 00000058 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000000 _DATA	
readline . . . . . . . . . . . .	L Near	 00000000 FLAT	External
results  . . . . . . . . . . . .	Byte	 0000004B _DATA	
writeNumber  . . . . . . . . . .	L Near	 00000000 FLAT	External
writeline  . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
