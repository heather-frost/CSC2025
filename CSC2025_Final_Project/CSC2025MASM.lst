Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/15/24 11:58:03
gameLoop.asm						     Page 1 - 1


				; Main Console program
				; Spencer Medberry
				; 1 November 2024
				; gameLoop adapted from fibonacci counter

				; Register usage:
				;     EAX - readWrite procedure communication
				;     EBX - integer user input result for term counting
				;     ECX - helper register: char storage during ASCII conversion

				.model flat

				extern writeline: near
				extern readline: near
				extern charCount: near
				extern writeNumber: near

 00000000			.data

				; both end with 0 to terminate the string
 00000000 4F 70 65 6E 69	prompt              byte  "Opening gameLoop prompt here: OLD PROMPT: Enter a number between 1 and 5: ", 0
	   6E 67 20 67 61
	   6D 65 4C 6F 6F
	   70 20 70 72 6F
	   6D 70 74 20 68
	   65 72 65 3A 20
	   4F 4C 44 20 50
	   52 4F 4D 50 54
	   3A 20 45 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 62 65 74
	   77 65 65 6E 20
	   31 20 61 6E 64
	   20 35 3A 20 00
				; beginning with 10 sends a line feed character before the text
 0000004B 0A 53 74 61 72	gameLoopDialog     byte  10,"Starting with 1 and 2, the terms produced are: ",0
	   74 69 6E 67 20
	   77 69 74 68 20
	   31 20 61 6E 64
	   20 32 2C 20 74
	   68 65 20 74 65
	   72 6D 73 20 70
	   72 6F 64 75 63
	   65 64 20 61 72
	   65 3A 20 00
 0000007C 50 6C 65 61 73	invalidInputDialog    byte  "Please enter a valid [1-5] input.",10,10,0
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 69 64
	   20 5B 31 2D 35
	   5D 20 69 6E 70
	   75 74 2E 0A 0A
	   00
 000000A0 59 6F 75 20 62	gameOverDialog      byte    "You blew up!",10,10,0
	   6C 65 77 20 75
	   70 21 0A 0A 00
 000000AF 0A 0A 57 6F 75	playAgainDialog     byte    10,10,"Would you like to play again? [y/n] ",0
	   6C 64 20 79 6F
	   75 20 6C 69 6B
	   65 20 74 6F 20
	   70 6C 61 79 20
	   61 67 61 69 6E
	   3F 20 5B 79 2F
	   6E 5D 20 00
 000000D6 0A 0A 54 68 65	finalTerm           byte  10,10,"The value of term ",0
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 65 72 6D 20
	   00
 000000EB 69 73 20 00		finalDialog         byte  "is ",0

 000000EF 01 02 03 04 05	cardArray db 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
	   06 07 08 09 0A
	   0B 0C 0D 0E 0F
	   10 11 12 13 14
	   15 16 17 18 19
				;cardArray db '1','2','3','4','5','6','7','8','9','0','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25'
				;cardArray db 25 dup(0)

 00000000			.code

				;; Call gameLoop() - No Parameters, no return value
 00000000			gameLoop PROC near
 00000000			_gameLoop:

 00000000			Setup:
				;GAME SETUP GOES HERE

 00000000			gameLoopStart:
				    ; DISPLAY GAME STATE

				    ; DISPLAY GAME STATE [PLACEHOLDER FOR ROW DIALOG]
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 00000000  68 00000000 R	    push  offset prompt
 00000005  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 0000000A  50			    push  eax
 0000000B  68 00000000 R	    push  offset prompt
 00000010  E8 00000000 E	    call  writeline

				    ; ACCEPT USER INPUT
				        ;; Call readline() - No Parameters, Returns ptr to buffer in eax
 00000015  E8 00000000 E	    call  readline
				    ; user input stored in eax
				    
				    ;convert user input from ASCII to integer
 0000001A  B9 00000000		    mov   ecx,0
 0000001F  BB 00000000		    mov   ebx,0

 00000024  8A 08		    mov  cl,[eax]                   ; Look at the character in the string
 00000026  80 E9 30		    sub  cl,'0'
 00000029  03 D9		    add  ebx,ecx

 0000002B  83 FB 05		    cmp ebx,5
 0000002E  0F 8F 0000010E	    jg invalidInputError
 00000034  83 FB 01		    cmp ebx,1
 00000037  0F 8C 00000105	    jl invalidInputError
 0000003D  53			    push ebx

				    
				    ; DISPLAY GAME STATE [PLACEHOLDER FOR COLUMN DIALOG]
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 0000003E  68 00000000 R	    push  offset prompt
 00000043  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 00000048  50			    push  eax
 00000049  68 00000000 R	    push  offset prompt
 0000004E  E8 00000000 E	    call  writeline

				    ; ACCEPT USER INPUT
				        ;; Call readline() - No Parameters, Returns ptr to buffer in eax
 00000053  E8 00000000 E	    call  readline
				    ; user input stored in eax
				    
				    ;convert user input from ASCII to integer
 00000058  B9 00000000		    mov   ecx,0
 0000005D  5B			    pop   ebx
 0000005E  83 EB 01		    sub  ebx, 1
 00000061  6B DB 05		    imul ebx, 5

 00000064  8A 08		    mov  cl,[eax]                   ; Look at the character in the string
 00000066  80 E9 30		    sub  cl,'0'

 00000069  83 F9 05		    cmp ecx,5
 0000006C  0F 8F 000000D0	    jg invalidInputError
 00000072  83 F9 01		    cmp ecx,1
 00000075  0F 8C 000000C7	    jl invalidInputError
 0000007B  03 D9		    add  ebx,ecx

 0000007D			random:
 0000007D  B4 00		   MOV AH, 00h  ; get system time

 0000007F  66| 8B C2		   mov  ax, dx
 00000082  66| 33 D2		   xor  dx, dx
 00000085  66| B9 000A		   mov  cx, 10    
 00000089  66| F7 F1		   div  cx       ; dx now contains [0-9] remainder of division

 0000008C  66| 8B C2		   mov ax, dx
 0000008F  66| 33 D2		   xor dx, dx
 00000092  66| B9 0002		   mov cx, 2
 00000096  66| F7 F1		   div cx       ; ax now contains [0-4]

 00000099  66| 83 F8 04		   cmp ax, 4
 0000009D  74 DE		   je random    ; don't want 4s

 0000009F  66| 8B D0		   mov dx, ax
 000000A2  B8 00000000		   mov eax, 0
 000000A7  66| 03 C2		   add ax, dx  ;random [0-3] is in eax

				    

				;VICTORY
 000000AA  BB 00000000		    mov  ebx, 0
 000000AF  8A 1D 000000F7 R	    mov  bl, [cardArray+8]
 000000B5  50			    push eax    ;2nd writeNumber parameter
 000000B6  53			    push ebx    ;1st writeNumber parameter
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 000000B7  68 000000D6 R	    push  offset finalTerm
 000000BC  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 000000C1  50			    push  eax
 000000C2  68 000000D6 R	    push  offset finalTerm
 000000C7  E8 00000000 E	    call  writeline
				        ;; Call writeNumber(number) - print the ASCII value of a number.
				        ;; Parameter: number is number to be converted to Ascii and printed.
				        ;; Returns nothing
 000000CC  E8 00000000 E	    call  writeNumber
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 000000D1  68 000000EB R	    push  offset finalDialog
 000000D6  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 000000DB  50			    push  eax
 000000DC  68 000000EB R	    push  offset finalDialog
 000000E1  E8 00000000 E	    call  writeline
				        ;; Call writeNumber(number) - print the ASCII value of a number.
				        ;; Parameter: number is number to be converted to Ascii and printed.
				        ;; Returns nothing
 000000E6  E8 00000000 E	    call  writeNumber

 000000EB			playAgain:
				    ; PLAY AGAIN?
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 000000EB  68 000000AF R	    push  offset playAgainDialog
 000000F0  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 000000F5  50			    push  eax
 000000F6  68 000000AF R	    push  offset playAgainDialog
 000000FB  E8 00000000 E	    call  writeline

				    ; ACCEPT USER INPUT
				        ;; Call readline() - No Parameters, Returns ptr to buffer in eax
 00000100  E8 00000000 E	    call  readline
				    ; user input stored in eax
				    
				    ; Look at the character in the string
 00000105  B9 00000000		    mov   ecx,0
 0000010A  8A 08		    mov  cl,[eax]

 0000010C  83 F9 6E		    cmp ecx, 110
 0000010F  74 19		    je exit
 00000111  83 F9 4E		    cmp ecx, 78
 00000114  74 14		    je exit
 00000116  83 F9 79		    cmp ecx, 121
 00000119  0F 84 FFFFFEE1	    je gameLoopStart
 0000011F  83 F9 59		    cmp ecx, 89
 00000122  0F 84 FFFFFED8	    je gameLoopStart
 00000128  EB C1		    jmp playAgain
				     
 0000012A			exit:
 0000012A  C3			    ret     ; Return to the main program.

 0000012B			gameOver:
				    ; Print gameOverDialog
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 0000012B  68 000000A0 R	    push  offset gameOverDialog
 00000130  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 00000135  50			    push  eax
 00000136  68 000000A0 R	    push  offset gameOverDialog
 0000013B  E8 00000000 E	    call  writeline
 00000140  EB A9		    jmp playAgain
				; End gameOver

 00000142			invalidInputError:
				    ; Print invalidInputDialog
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 00000142  68 0000007C R	    push  offset invalidInputDialog
 00000147  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 0000014C  50			    push  eax
 0000014D  68 0000007C R	    push  offset invalidInputDialog
 00000152  E8 00000000 E	    call  writeline
 00000157  E9 FFFFFEA4		    jmp _gameLoop
				; End invalidInputError
				    
 0000015C			gameLoop ENDP
				END
Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/15/24 11:58:03
gameLoop.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000108 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000015C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

gameLoop . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000015C Public
  _gameLoop  . . . . . . . . . .	L Near	 00000000 _TEXT	
  Setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  gameLoopStart  . . . . . . . .	L Near	 00000000 _TEXT	
  random . . . . . . . . . . . .	L Near	 0000007D _TEXT	
  playAgain  . . . . . . . . . .	L Near	 000000EB _TEXT	
  exit . . . . . . . . . . . . .	L Near	 0000012A _TEXT	
  gameOver . . . . . . . . . . .	L Near	 0000012B _TEXT	
  invalidInputError  . . . . . .	L Near	 00000142 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
cardArray  . . . . . . . . . . .	Byte	 000000EF _DATA	
charCount  . . . . . . . . . . .	L Near	 00000000 FLAT	External
finalDialog  . . . . . . . . . .	Byte	 000000EB _DATA	
finalTerm  . . . . . . . . . . .	Byte	 000000D6 _DATA	
gameLoopDialog . . . . . . . . .	Byte	 0000004B _DATA	
gameOverDialog . . . . . . . . .	Byte	 000000A0 _DATA	
invalidInputDialog . . . . . . .	Byte	 0000007C _DATA	
playAgainDialog  . . . . . . . .	Byte	 000000AF _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000000 _DATA	
readline . . . . . . . . . . . .	L Near	 00000000 FLAT	External
writeNumber  . . . . . . . . . .	L Near	 00000000 FLAT	External
writeline  . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
