Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/23/24 14:11:03
gameLoop.asm						     Page 1 - 1


				; Main Console program
				; Spencer Medberry
				; 1 November 2024
				; gameLoop adapted from fibonacci counter

				; Register usage:
				;     EAX - external routine communication
				;     EBX - 
				;     ECX - 

				.model flat

				extern writeline: near
				extern readline: near
				extern charCount: near
				extern writeNumber: near
				extern printString: near

 00000000			.data

 00000000 57 68 69 63 68	rowPrompt               byte  "Which row would you like to flip a card in? [1-5]: ", 0
	   20 72 6F 77 20
	   77 6F 75 6C 64
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 66 6C
	   69 70 20 61 20
	   63 61 72 64 20
	   69 6E 3F 20 5B
	   31 2D 35 5D 3A
	   20 00
 00000034 57 68 69 63 68	columnPrompt               byte  "Which column would you like to flip a card in? [1-5]: ", 0
	   20 63 6F 6C 75
	   6D 6E 20 77 6F
	   75 6C 64 20 79
	   6F 75 20 6C 69
	   6B 65 20 74 6F
	   20 66 6C 69 70
	   20 61 20 63 61
	   72 64 20 69 6E
	   3F 20 5B 31 2D
	   35 5D 3A 20 00
 0000006B 0A 53 74 61 72	gameLoopDialog     byte  10,"Starting with 1 and 2, the terms produced are: ",0
	   74 69 6E 67 20
	   77 69 74 68 20
	   31 20 61 6E 64
	   20 32 2C 20 74
	   68 65 20 74 65
	   72 6D 73 20 70
	   72 6F 64 75 63
	   65 64 20 61 72
	   65 3A 20 00

 0000009C 50 6C 65 61 73	invalidInputDialog    byte  "Please enter a valid [1-5] input.",10,10,0
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 69 64
	   20 5B 31 2D 35
	   5D 20 69 6E 70
	   75 74 2E 0A 0A
	   00

 000000C0 0A 59 6F 75 20	gameOverDialog       byte    10,"You blew up!",0
	   62 6C 65 77 20
	   75 70 21 00
 000000CE 0A 0A 57 6F 75	playAgainDialog     byte    10,10,"Would you like to play again? [y/n] ",0
	   6C 64 20 79 6F
	   75 20 6C 69 6B
	   65 20 74 6F 20
	   70 6C 61 79 20
	   61 67 61 69 6E
	   3F 20 5B 79 2F
	   6E 5D 20 00
 000000F5 0A 0A 54 68 65	finalTerm            byte  10,10,"The value of term ",0
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 65 72 6D 20
	   00
 0000010A 69 73 20 00		finalDialog          byte  "is ",0

 0000010E 20 5F 5F 5F 5F	gameTop              byte  " _______________________________________", 10,0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   0A 00
 00000138 7C 20 20 20 20	gameRowTop           byte  "|       |       |       |       |       |TOTAL: ",0
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   7C 54 4F 54 41
	   4C 3A 20 00
 00000169 0A 7C 00		gameRowTotalAppend   byte 10, "|",0
 0000016C 20 20 20 00		gameFrontSpacer        byte  "   ",0
 00000170 20 20 7C 00		gameBackSpacer        byte  "  |",0
 00000174 42 4F 4D 42 53	gameRowBombs         byte   "BOMBS: ",0
	   3A 20 00
 0000017C 0A 7C 5F 5F 5F	gameRowBottom        byte  10,"|_______|_______|_______|_______|_______|", 10,0
	   5F 5F 5F 5F 7C
	   5F 5F 5F 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 5F 5F 7C 5F
	   5F 5F 5F 5F 5F
	   5F 7C 0A 00

 000001A8 0A 0A 56 49 43	victorySpeech              byte 10,10,"VICTORY!!!",10,10,0
	   54 4F 52 59 21
	   21 21 0A 0A 00

 000001B7  00000019 [		cardArray db 25 dup(?)
	    00
	   ]
 000001D0  00000019 [		facingArray db 25 dup(0)
	    00
	   ]
 000001E9  00000005 [		rowTotals    db  5 dup(0)
	    00
	   ]
 000001EE  00000005 [		rowBombs    db  5 dup(0)
	    00
	   ]
 000001F3  00000005 [		columnTotals    db  5 dup(0)
	    00
	   ]
 000001F8  00000005 [		columnBombs    db  5 dup(0)
	    00
	   ]

 000001FD 3F 20 00		faceDown    byte "? ",0


 00000000			.code

				;; Call gameLoop() - No Parameters, no return value
 00000000			gameLoop PROC near
 00000000			_gameLoop:

 00000000			Setup:
				; populates cardArray w/ [0-3]
 00000000  BB 00000000		    mov ebx, 0
 00000005			StaticPopulationLoop:
 00000005  0F C7 F0		    RDRAND EAX

 00000008  66| 33 D2		    xor  dx, dx
 0000000B  66| B9 000A		    mov  cx, 10    
 0000000F  66| F7 F1		    div  cx        ; dx now contains [0-9] remainder of division

 00000012  66| 8B C2		    mov ax, dx
 00000015  66| 33 D2		    xor dx, dx
 00000018  66| B9 0002		    mov cx, 2
 0000001C  66| F7 F1		    div cx        ; ax now contains [0-4]

 0000001F  66| 83 F8 04		    cmp ax, 4
 00000023  74 E0		    je StaticPopulationLoop    ; don't want 4s
				    
 00000025  66| 8B D0		    mov dx, ax
 00000028  B8 00000000		    mov eax, 0
 0000002D  66| 03 C2		    add ax, dx  ;random [0-3] is in eax

 00000030  88 83 000001B7 R	    mov [cardArray+ebx], al
 00000036  83 C3 01		    add ebx, 1
 00000039  83 FB 1A		    cmp ebx, 26
 0000003C  7C C7		    jl StaticPopulationLoop
 0000003E  C6 05 000001D0 R	    mov [facingArray], 0
	   00

 00000045  BB 00000000		    mov ebx, 0
 0000004A  B9 00000000		    mov ecx, 0
 0000004F			rowInfoLoop:
 0000004F  B8 00000000		    mov eax, 0
 00000054			    rowInfoInnerLoop:
 00000054  50			        push eax
 00000055  0F B6 83		        movzx eax, [cardArray+ebx]
	   000001B7 R
 0000005C  83 F8 00		        cmp eax, 0
 0000005F  7F 09		        jg rowTotalAdd
 00000061  80 81 000001EE R	            add [rowBombs+ecx], 1
	   01
 00000068  EB 06		            jmp rowIncrement
 0000006A			        rowTotalAdd:
 0000006A  00 81 000001E9 R	            add [rowTotals+ecx], al
 00000070			        rowIncrement:
 00000070  83 C3 01		            add ebx, 1
 00000073  58			            pop eax
 00000074  83 C0 01		            add eax, 1
 00000077  83 F8 05		            cmp eax, 5
 0000007A  7C D8		            jl rowInfoInnerLoop
				    ;end inner loop
 0000007C  83 C1 01		    add ecx, 1
 0000007F  83 F9 05		    cmp ecx, 5
 00000082  7C CB		    jl rowInfoLoop
				;end rowInfoLoop


 00000084			gameLoopStart:
				    ; DISPLAY GAME STATE
 00000084  68 0000010E R	    push offset gameTop
 00000089  E8 00000000 E	    call printString
 0000008E  B9 00000000		    mov ecx, 0
 00000093			    printLoop:
 00000093  51			        push ecx
 00000094  68 00000138 R	        push offset gameRowTop
 00000099  E8 00000000 E	        call printString
 0000009E  58			        pop eax
 0000009F  50			        push eax
 000000A0  51			        push ecx
 000000A1  52			        push edx
 000000A2  BA 00000000		        mov edx, 0
 000000A7  B9 00000005		        mov ecx, 5
 000000AC  F7 F1		        div ecx
 000000AE  5A			        pop edx
 000000AF  59			        pop ecx
				;        sub eax, 1
 000000B0  0F B6 80		        movzx eax, [rowTotals+eax]
	   000001E9 R
				;        movzx eax, [rowTotals]
 000000B7  50			        push eax
 000000B8  E8 00000000 E	        call writeNumber
 000000BD  68 00000169 R	        push offset gameRowTotalAppend
 000000C2  E8 00000000 E	        call printString
 000000C7  59			        pop ecx
 000000C8  8B D1		        mov edx, ecx
 000000CA  83 C2 05		        add edx, 5
 000000CD  52			        push edx
 000000CE			        printSubLoop:
 000000CE  52			             push edx
 000000CF  51			             push ecx
 000000D0  68 0000016C R	             push offset gameFrontSpacer
 000000D5  E8 00000000 E	             call printString
 000000DA  59			             pop ecx
 000000DB  51			             push ecx
 000000DC  BB 00000000		             mov ebx, 0
 000000E1  8A 99 000001D0 R	             mov bl, [facingArray+ecx]
 000000E7  83 FB 00		             cmp ebx, 0
 000000EA  7F 0C		             jg faceup

 000000EC  68 000001FD R	             push offset faceDown
 000000F1  E8 00000000 E	             call printString
 000000F6  EB 0C		             jmp facingDone

 000000F8			             faceup:
 000000F8  8A 99 000001B7 R	             mov bl, [cardArray+ecx]
 000000FE  53			             push ebx
 000000FF  E8 00000000 E	             call writeNumber

 00000104			             facingDone:
 00000104  68 00000170 R	             push offset gameBackSpacer
 00000109  E8 00000000 E	             call printString
 0000010E  59			             pop ecx
 0000010F  83 C1 01		             add ecx, 1
 00000112  5A			             pop edx
 00000113  3B CA		             cmp ecx, edx
 00000115  7D 02		             jge endPrintSubLoop
 00000117  EB B5		             jmp printSubLoop
 00000119			        endPrintSubLoop:
 00000119  5A			        pop edx
 0000011A  51			        push ecx
 0000011B  68 00000174 R	        push offset gameRowBombs
 00000120  E8 00000000 E	        call printString
 00000125  58			        pop eax
 00000126  50			        push eax
 00000127  51			        push ecx
 00000128  52			        push edx
 00000129  BA 00000000		        mov edx, 0
 0000012E  B9 00000005		        mov ecx, 5
 00000133  F7 F1		        div ecx
 00000135  5A			        pop edx
 00000136  59			        pop ecx
 00000137  83 E8 01		        sub eax, 1
 0000013A  0F B6 80		        movzx eax, [rowBombs+eax]
	   000001EE R
				;        movzx eax, [rowBombs]
 00000141  50			        push eax
 00000142  E8 00000000 E	        call writeNumber
 00000147  68 0000017C R	        push offset gameRowBottom
 0000014C  E8 00000000 E	        call printString
 00000151  59			        pop ecx
 00000152  83 F9 19		        cmp ecx, 25
 00000155  0F 8C FFFFFF38	        jl printLoop
				    ;end printLoop

				    ;Guess Input:Row
 0000015B  68 00000000 R	    push  offset rowPrompt
 00000160  E8 00000000 E	    call  printString
 00000165  E8 00000000 E	    call  readline
				    
				    ;convert user input from ASCII to integer
 0000016A  B9 00000000		    mov    ecx,0
 0000016F  BB 00000000		    mov    ebx,0

 00000174  8A 08		    mov  cl,[eax]                    ; Look at the character in the string
 00000176  80 E9 30		    sub  cl,'0'
 00000179  03 D9		    add  ebx,ecx

 0000017B  83 FB 05		    cmp ebx,5
 0000017E  0F 8F 000000F5	    jg invalidInputError
 00000184  83 FB 01		    cmp ebx,1
 00000187  0F 8C 000000EC	    jl invalidInputError
 0000018D  53			    push ebx

				    ;Guess Input: Column
 0000018E  68 00000034 R	    push  offset columnPrompt
 00000193  E8 00000000 E	    call  printString
 00000198  E8 00000000 E	    call  readline
				    
				    ;convert user input from ASCII to integer
 0000019D  B9 00000000		    mov    ecx,0
 000001A2  5B			    pop    ebx
 000001A3  83 EB 01		    sub  ebx, 1
 000001A6  6B DB 05		    imul ebx, 5

 000001A9  8A 08		    mov  cl,[eax]                    ; Look at the character in the string
 000001AB  80 E9 30		    sub  cl,'0'

 000001AE  83 F9 05		    cmp ecx,5
 000001B1  0F 8F 000000C2	    jg invalidInputError
 000001B7  83 F9 01		    cmp ecx,1
 000001BA  0F 8C 000000B9	    jl invalidInputError
 000001C0  03 D9		    add  ebx,ecx

				;gameover check
 000001C2  B8 00000000		    mov  eax, 0
 000001C7  83 EB 01		    sub  ebx, 1
 000001CA  8A 83 000001B7 R	    mov  al, [cardArray+ebx]
 000001D0  C6 83 000001D0 R	    mov  [facingArray+ebx], 1
	   01
 000001D7  83 F8 00		    cmp  eax,0
 000001DA  0F 84 0000008D	    je    gameOver

 000001E0  B9 00000000		    mov ecx, 0
 000001E5			victoryCheck:
 000001E5  0F B6 81		    movzx eax, byte ptr [facingArray+ecx]
	   000001D0 R
 000001EC  83 F8 01		    cmp eax, 1
 000001EF  74 10		    je victoryCheckContinue
 000001F1  0F B6 81		    movzx eax, byte ptr [cardArray+ecx]
	   000001B7 R
 000001F8  83 F8 02		    cmp eax, 2
 000001FB  0F 8D FFFFFE83	    jge gameLoopStart
 00000201			victoryCheckContinue:
 00000201  83 C1 01		    add ecx, 1
 00000204  83 F9 19		    cmp ecx, 25
 00000207  7D 02		    jge victory
 00000209  EB DA		    jmp victoryCheck

 0000020B			victory:
 0000020B  50			    push eax    ;2nd writeNumber parameter
 0000020C  83 C3 01		    add  ebx, 1
 0000020F  53			    push ebx    ;1st writeNumber parameter
 00000210  68 000000F5 R	    push  offset finalTerm
 00000215  E8 00000000 E	    call  printString

 0000021A  E8 00000000 E	    call  writeNumber

 0000021F  68 0000010A R	    push  offset finalDialog
 00000224  E8 00000000 E	    call  printString

 00000229  E8 00000000 E	    call  writeNumber

 0000022E  68 000001A8 R	    push offset victorySpeech
 00000233  E8 00000000 E	    call printString


 00000238			playAgain:
 00000238  68 000000CE R	    push  offset playAgainDialog
 0000023D  E8 00000000 E	    call  printString

 00000242  E8 00000000 E	    call  readline
				    
				    ; Look at the character in the string
 00000247  B9 00000000		    mov    ecx,0
 0000024C  8A 08		    mov  cl,[eax]

 0000024E  83 F9 6E		    cmp ecx, 110
 00000251  74 19		    je exit
 00000253  83 F9 4E		    cmp ecx, 78
 00000256  74 14		    je exit
 00000258  83 F9 79		    cmp ecx, 121
 0000025B  0F 84 FFFFFE23	    je gameLoopStart
 00000261  83 F9 59		    cmp ecx, 89
 00000264  0F 84 FFFFFE1A	    je gameLoopStart
 0000026A  EB CC		    jmp playAgain
				     
 0000026C			exit:
 0000026C  C3			    ret     ; Return to the main program.

 0000026D			gameOver:
				    ; Print gameOverDialog
 0000026D  68 000000C0 R	    push  offset gameOverDialog
 00000272  E8 00000000 E	    call  printString
 00000277  EB BF		    jmp playAgain
				; End gameOver

 00000279			invalidInputError:
				    ; Print invalidInputDialog
 00000279  68 0000009C R	    push  offset invalidInputDialog
 0000027E  E8 00000000 E	    call  printString
 00000283  E9 FFFFFDFC		    jmp gameLoopStart
				; End invalidInputError
				    
 00000288			gameLoop ENDP
				END
Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/23/24 14:11:03
gameLoop.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000200 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000288 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

gameLoop . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000288 Public
  _gameLoop  . . . . . . . . . .	L Near	 00000000 _TEXT	
  Setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  StaticPopulationLoop . . . . .	L Near	 00000005 _TEXT	
  rowInfoLoop  . . . . . . . . .	L Near	 0000004F _TEXT	
  rowInfoInnerLoop . . . . . . .	L Near	 00000054 _TEXT	
  rowTotalAdd  . . . . . . . . .	L Near	 0000006A _TEXT	
  rowIncrement . . . . . . . . .	L Near	 00000070 _TEXT	
  gameLoopStart  . . . . . . . .	L Near	 00000084 _TEXT	
  printLoop  . . . . . . . . . .	L Near	 00000093 _TEXT	
  printSubLoop . . . . . . . . .	L Near	 000000CE _TEXT	
  faceup . . . . . . . . . . . .	L Near	 000000F8 _TEXT	
  facingDone . . . . . . . . . .	L Near	 00000104 _TEXT	
  endPrintSubLoop  . . . . . . .	L Near	 00000119 _TEXT	
  victoryCheck . . . . . . . . .	L Near	 000001E5 _TEXT	
  victoryCheckContinue . . . . .	L Near	 00000201 _TEXT	
  victory  . . . . . . . . . . .	L Near	 0000020B _TEXT	
  playAgain  . . . . . . . . . .	L Near	 00000238 _TEXT	
  exit . . . . . . . . . . . . .	L Near	 0000026C _TEXT	
  gameOver . . . . . . . . . . .	L Near	 0000026D _TEXT	
  invalidInputError  . . . . . .	L Near	 00000279 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
cardArray  . . . . . . . . . . .	Byte	 000001B7 _DATA	
charCount  . . . . . . . . . . .	L Near	 00000000 FLAT	External
columnBombs  . . . . . . . . . .	Byte	 000001F8 _DATA	
columnPrompt . . . . . . . . . .	Byte	 00000034 _DATA	
columnTotals . . . . . . . . . .	Byte	 000001F3 _DATA	
faceDown . . . . . . . . . . . .	Byte	 000001FD _DATA	
facingArray  . . . . . . . . . .	Byte	 000001D0 _DATA	
finalDialog  . . . . . . . . . .	Byte	 0000010A _DATA	
finalTerm  . . . . . . . . . . .	Byte	 000000F5 _DATA	
gameBackSpacer . . . . . . . . .	Byte	 00000170 _DATA	
gameFrontSpacer  . . . . . . . .	Byte	 0000016C _DATA	
gameLoopDialog . . . . . . . . .	Byte	 0000006B _DATA	
gameOverDialog . . . . . . . . .	Byte	 000000C0 _DATA	
gameRowBombs . . . . . . . . . .	Byte	 00000174 _DATA	
gameRowBottom  . . . . . . . . .	Byte	 0000017C _DATA	
gameRowTop . . . . . . . . . . .	Byte	 00000138 _DATA	
gameRowTotalAppend . . . . . . .	Byte	 00000169 _DATA	
gameTop  . . . . . . . . . . . .	Byte	 0000010E _DATA	
invalidInputDialog . . . . . . .	Byte	 0000009C _DATA	
playAgainDialog  . . . . . . . .	Byte	 000000CE _DATA	
printString  . . . . . . . . . .	L Near	 00000000 FLAT	External
readline . . . . . . . . . . . .	L Near	 00000000 FLAT	External
rowBombs . . . . . . . . . . . .	Byte	 000001EE _DATA	
rowPrompt  . . . . . . . . . . .	Byte	 00000000 _DATA	
rowTotals  . . . . . . . . . . .	Byte	 000001E9 _DATA	
victorySpeech  . . . . . . . . .	Byte	 000001A8 _DATA	
writeNumber  . . . . . . . . . .	L Near	 00000000 FLAT	External
writeline  . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
