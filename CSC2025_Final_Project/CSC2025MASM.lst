Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/22/24 12:06:31
gameLoop.asm						     Page 1 - 1


				; Main Console program
				; Spencer Medberry
				; 1 November 2024
				; gameLoop adapted from fibonacci counter

				; Register usage:
				;     EAX - external routine communication
				;     EBX - 
				;     ECX - 

				.model flat

				extern writeline: near
				extern readline: near
				extern charCount: near
				extern writeNumber: near
				extern printString: near

 00000000			.data

 00000000 57 68 69 63 68	rowPrompt               byte  "Which row would you like to flip a card in? [1-5]: ", 0
	   20 72 6F 77 20
	   77 6F 75 6C 64
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 66 6C
	   69 70 20 61 20
	   63 61 72 64 20
	   69 6E 3F 20 5B
	   31 2D 35 5D 3A
	   20 00
 00000034 57 68 69 63 68	columnPrompt               byte  "Which column would you like to flip a card in? [1-5]: ", 0
	   20 63 6F 6C 75
	   6D 6E 20 77 6F
	   75 6C 64 20 79
	   6F 75 20 6C 69
	   6B 65 20 74 6F
	   20 66 6C 69 70
	   20 61 20 63 61
	   72 64 20 69 6E
	   3F 20 5B 31 2D
	   35 5D 3A 20 00
 0000006B 0A 53 74 61 72	gameLoopDialog     byte  10,"Starting with 1 and 2, the terms produced are: ",0
	   74 69 6E 67 20
	   77 69 74 68 20
	   31 20 61 6E 64
	   20 32 2C 20 74
	   68 65 20 74 65
	   72 6D 73 20 70
	   72 6F 64 75 63
	   65 64 20 61 72
	   65 3A 20 00

 0000009C 50 6C 65 61 73	invalidInputDialog    byte  "Please enter a valid [1-5] input.",10,10,0
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 69 64
	   20 5B 31 2D 35
	   5D 20 69 6E 70
	   75 74 2E 0A 0A
	   00

 000000C0 0A 59 6F 75 20	gameOverDialog       byte    10,"You blew up!",0
	   62 6C 65 77 20
	   75 70 21 00
 000000CE 0A 0A 57 6F 75	playAgainDialog     byte    10,10,"Would you like to play again? [y/n] ",0
	   6C 64 20 79 6F
	   75 20 6C 69 6B
	   65 20 74 6F 20
	   70 6C 61 79 20
	   61 67 61 69 6E
	   3F 20 5B 79 2F
	   6E 5D 20 00
 000000F5 0A 0A 54 68 65	finalTerm            byte  10,10,"The value of term ",0
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 65 72 6D 20
	   00
 0000010A 69 73 20 00		finalDialog          byte  "is ",0

 0000010E 20 5F 5F 5F 5F	gameTop              byte  " _______________________________________", 10,0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   0A 00
 00000138 7C 20 20 20 20	gameRowTop           byte  "|       |       |       |       |       |TOTAL: ",0
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   7C 54 4F 54 41
	   4C 3A 20 00
 00000169 0A 7C 00		gameRowTotalAppend   byte 10, "|",0
 0000016C 20 20 20 00		gameFrontSpacer        byte  "   ",0
 00000170 20 20 7C 00		gameBackSpacer        byte  "  |",0
 00000174 42 4F 4D 42 53	gameRowBombs         byte   "BOMBS: ",0
	   3A 20 00
 0000017C 0A 7C 5F 5F 5F	gameRowBottom        byte  10,"|_______|_______|_______|_______|_______|", 10,0
	   5F 5F 5F 5F 7C
	   5F 5F 5F 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 5F 5F 7C 5F
	   5F 5F 5F 5F 5F
	   5F 7C 0A 00

 000001A8 0A 0A 56 49 43	victorySpeech              byte 10,10,"VICTORY!!!",10,10,0
	   54 4F 52 59 21
	   21 21 0A 0A 00

 000001B7  00000019 [		cardArray db 25 dup(?)
	    00
	   ]
 000001D0  00000019 [		facingArray db 25 dup(0)
	    00
	   ]
 000001E9  00000005 [		rowTotals    db  5 dup(0)
	    00
	   ]
 000001EE  00000005 [		rowBombs    db  5 dup(0)
	    00
	   ]
 000001F3  00000005 [		columnTotals    db  5 dup(0)
	    00
	   ]
 000001F8  00000005 [		columnBombs    db  5 dup(0)
	    00
	   ]

 000001FD 3F 20 00		faceDown    byte "? ",0


 00000000			.code

				;; Call gameLoop() - No Parameters, no return value
 00000000			gameLoop PROC near
 00000000			_gameLoop:

 00000000			Setup:
				; populates cardArray w/ [0-3]
 00000000  BB 00000000		    mov ebx, 0
 00000005			StaticPopulationLoop:
 00000005  0F C7 F0		    RDRAND EAX

 00000008  66| 33 D2		    xor  dx, dx
 0000000B  66| B9 000A		    mov  cx, 10    
 0000000F  66| F7 F1		    div  cx        ; dx now contains [0-9] remainder of division

 00000012  66| 8B C2		    mov ax, dx
 00000015  66| 33 D2		    xor dx, dx
 00000018  66| B9 0002		    mov cx, 2
 0000001C  66| F7 F1		    div cx        ; ax now contains [0-4]

 0000001F  66| 83 F8 04		    cmp ax, 4
 00000023  74 E0		    je StaticPopulationLoop    ; don't want 4s
				    
 00000025  66| 8B D0		    mov dx, ax
 00000028  B8 00000000		    mov eax, 0
 0000002D  66| 03 C2		    add ax, dx  ;random [0-3] is in eax

 00000030  88 83 000001B7 R	    mov [cardArray+ebx], al
 00000036  83 C3 01		    add ebx, 1
 00000039  83 FB 1A		    cmp ebx, 26
 0000003C  7C C7		    jl StaticPopulationLoop
 0000003E  C6 05 000001D0 R	    mov [facingArray], 0
	   00

 00000045  BB 00000000		    mov ebx, 0
 0000004A			rowInfoLoop:
 0000004A  0F B6 83		    movzx eax, [cardArray+ebx]
	   000001B7 R
 00000051  83 F8 00		    cmp eax, 0
 00000054  7F 09		    jg rowTotalAdd
 00000056  80 05 000001EE R	    add [rowBombs], 1
	   01
 0000005D  EB 06		    jmp rowIncrement
 0000005F			    rowTotalAdd:
 0000005F  00 05 000001E9 R	    add [rowTotals], al
 00000065			    rowIncrement:
 00000065  83 C3 01		    add ebx, 1
 00000068  83 FB 05		    cmp ebx, 5
 0000006B  7C DD		    jl rowInfoLoop
				;end rowInfoLoop


 0000006D			gameLoopStart:
				    ; DISPLAY GAME STATE
 0000006D  68 0000010E R	    push offset gameTop
 00000072  E8 00000000 E	    call printString
 00000077  B9 00000000		    mov ecx, 0
 0000007C			    printLoop:
 0000007C  51			        push ecx
 0000007D  68 00000138 R	        push offset gameRowTop
 00000082  E8 00000000 E	        call printString
 00000087  50			        push eax
 00000088  0F B6 05		        movzx eax, [rowTotals]
	   000001E9 R
 0000008F  50			        push eax
 00000090  E8 00000000 E	        call writeNumber
 00000095  58			        pop eax
 00000096  68 00000169 R	        push offset gameRowTotalAppend
 0000009B  E8 00000000 E	        call printString
 000000A0  59			        pop ecx
 000000A1  8B D1		        mov edx, ecx
 000000A3  83 C2 05		        add edx, 5
 000000A6  52			        push edx
 000000A7			        printSubLoop:
 000000A7  52			             push edx
 000000A8  51			             push ecx
 000000A9  68 0000016C R	             push offset gameFrontSpacer
 000000AE  E8 00000000 E	             call printString
 000000B3  59			             pop ecx
 000000B4  51			             push ecx
 000000B5  BB 00000000		             mov ebx, 0
 000000BA  8A 99 000001D0 R	             mov bl, [facingArray+ecx]
 000000C0  83 FB 00		             cmp ebx, 0
 000000C3  7F 0C		             jg faceup

 000000C5  68 000001FD R	             push offset faceDown
 000000CA  E8 00000000 E	             call printString
 000000CF  EB 0C		             jmp facingDone

 000000D1			             faceup:
 000000D1  8A 99 000001B7 R	             mov bl, [cardArray+ecx]
 000000D7  53			             push ebx
 000000D8  E8 00000000 E	             call writeNumber

 000000DD			             facingDone:
 000000DD  68 00000170 R	             push offset gameBackSpacer
 000000E2  E8 00000000 E	             call printString
 000000E7  59			             pop ecx
 000000E8  83 C1 01		             add ecx, 1
 000000EB  5A			             pop edx
 000000EC  3B CA		             cmp ecx, edx
 000000EE  7D 02		             jge endPrintSubLoop
 000000F0  EB B5		             jmp printSubLoop
 000000F2			        endPrintSubLoop:
 000000F2  5A			        pop edx
 000000F3  51			        push ecx
 000000F4  68 00000174 R	        push offset gameRowBombs
 000000F9  E8 00000000 E	        call printString
 000000FE  50			        push eax
 000000FF  0F B6 05		        movzx eax, [rowBombs]
	   000001EE R
 00000106  50			        push eax
 00000107  E8 00000000 E	        call writeNumber
 0000010C  58			        pop eax
 0000010D  68 0000017C R	        push offset gameRowBottom
 00000112  E8 00000000 E	        call printString
 00000117  59			        pop ecx
 00000118  83 F9 19		        cmp ecx, 25
 0000011B  0F 8C FFFFFF5B	        jl printLoop
				    ;end printLoop

				    ;Guess Input:Row
 00000121  68 00000000 R	    push  offset rowPrompt
 00000126  E8 00000000 E	    call  printString
 0000012B  E8 00000000 E	    call  readline
				    
				    ;convert user input from ASCII to integer
 00000130  B9 00000000		    mov    ecx,0
 00000135  BB 00000000		    mov    ebx,0

 0000013A  8A 08		    mov  cl,[eax]                    ; Look at the character in the string
 0000013C  80 E9 30		    sub  cl,'0'
 0000013F  03 D9		    add  ebx,ecx

 00000141  83 FB 05		    cmp ebx,5
 00000144  0F 8F 000000F5	    jg invalidInputError
 0000014A  83 FB 01		    cmp ebx,1
 0000014D  0F 8C 000000EC	    jl invalidInputError
 00000153  53			    push ebx

				    ;Guess Input: Column
 00000154  68 00000034 R	    push  offset columnPrompt
 00000159  E8 00000000 E	    call  printString
 0000015E  E8 00000000 E	    call  readline
				    
				    ;convert user input from ASCII to integer
 00000163  B9 00000000		    mov    ecx,0
 00000168  5B			    pop    ebx
 00000169  83 EB 01		    sub  ebx, 1
 0000016C  6B DB 05		    imul ebx, 5

 0000016F  8A 08		    mov  cl,[eax]                    ; Look at the character in the string
 00000171  80 E9 30		    sub  cl,'0'

 00000174  83 F9 05		    cmp ecx,5
 00000177  0F 8F 000000C2	    jg invalidInputError
 0000017D  83 F9 01		    cmp ecx,1
 00000180  0F 8C 000000B9	    jl invalidInputError
 00000186  03 D9		    add  ebx,ecx

				;gameover check
 00000188  B8 00000000		    mov  eax, 0
 0000018D  83 EB 01		    sub  ebx, 1
 00000190  8A 83 000001B7 R	    mov  al, [cardArray+ebx]
 00000196  C6 83 000001D0 R	    mov  [facingArray+ebx], 1
	   01
 0000019D  83 F8 00		    cmp  eax,0
 000001A0  0F 84 0000008D	    je    gameOver

 000001A6  B9 00000000		    mov ecx, 0
 000001AB			victoryCheck:
 000001AB  0F B6 81		    movzx eax, byte ptr [facingArray+ecx]
	   000001D0 R
 000001B2  83 F8 01		    cmp eax, 1
 000001B5  74 10		    je victoryCheckContinue
 000001B7  0F B6 81		    movzx eax, byte ptr [cardArray+ecx]
	   000001B7 R
 000001BE  83 F8 02		    cmp eax, 2
 000001C1  0F 8D FFFFFEA6	    jge gameLoopStart
 000001C7			victoryCheckContinue:
 000001C7  83 C1 01		    add ecx, 1
 000001CA  83 F9 19		    cmp ecx, 25
 000001CD  7D 02		    jge victory
 000001CF  EB DA		    jmp victoryCheck

 000001D1			victory:
 000001D1  50			    push eax    ;2nd writeNumber parameter
 000001D2  83 C3 01		    add  ebx, 1
 000001D5  53			    push ebx    ;1st writeNumber parameter
 000001D6  68 000000F5 R	    push  offset finalTerm
 000001DB  E8 00000000 E	    call  printString

 000001E0  E8 00000000 E	    call  writeNumber

 000001E5  68 0000010A R	    push  offset finalDialog
 000001EA  E8 00000000 E	    call  printString

 000001EF  E8 00000000 E	    call  writeNumber

 000001F4  68 000001A8 R	    push offset victorySpeech
 000001F9  E8 00000000 E	    call printString


 000001FE			playAgain:
 000001FE  68 000000CE R	    push  offset playAgainDialog
 00000203  E8 00000000 E	    call  printString

 00000208  E8 00000000 E	    call  readline
				    
				    ; Look at the character in the string
 0000020D  B9 00000000		    mov    ecx,0
 00000212  8A 08		    mov  cl,[eax]

 00000214  83 F9 6E		    cmp ecx, 110
 00000217  74 19		    je exit
 00000219  83 F9 4E		    cmp ecx, 78
 0000021C  74 14		    je exit
 0000021E  83 F9 79		    cmp ecx, 121
 00000221  0F 84 FFFFFE46	    je gameLoopStart
 00000227  83 F9 59		    cmp ecx, 89
 0000022A  0F 84 FFFFFE3D	    je gameLoopStart
 00000230  EB CC		    jmp playAgain
				     
 00000232			exit:
 00000232  C3			    ret     ; Return to the main program.

 00000233			gameOver:
				    ; Print gameOverDialog
 00000233  68 000000C0 R	    push  offset gameOverDialog
 00000238  E8 00000000 E	    call  printString
 0000023D  EB BF		    jmp playAgain
				; End gameOver

 0000023F			invalidInputError:
				    ; Print invalidInputDialog
 0000023F  68 0000009C R	    push  offset invalidInputDialog
 00000244  E8 00000000 E	    call  printString
 00000249  E9 FFFFFE1F		    jmp gameLoopStart
				; End invalidInputError
				    
 0000024E			gameLoop ENDP
				END
Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/22/24 12:06:31
gameLoop.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000200 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000024E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

gameLoop . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000024E Public
  _gameLoop  . . . . . . . . . .	L Near	 00000000 _TEXT	
  Setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  StaticPopulationLoop . . . . .	L Near	 00000005 _TEXT	
  rowInfoLoop  . . . . . . . . .	L Near	 0000004A _TEXT	
  rowTotalAdd  . . . . . . . . .	L Near	 0000005F _TEXT	
  rowIncrement . . . . . . . . .	L Near	 00000065 _TEXT	
  gameLoopStart  . . . . . . . .	L Near	 0000006D _TEXT	
  printLoop  . . . . . . . . . .	L Near	 0000007C _TEXT	
  printSubLoop . . . . . . . . .	L Near	 000000A7 _TEXT	
  faceup . . . . . . . . . . . .	L Near	 000000D1 _TEXT	
  facingDone . . . . . . . . . .	L Near	 000000DD _TEXT	
  endPrintSubLoop  . . . . . . .	L Near	 000000F2 _TEXT	
  victoryCheck . . . . . . . . .	L Near	 000001AB _TEXT	
  victoryCheckContinue . . . . .	L Near	 000001C7 _TEXT	
  victory  . . . . . . . . . . .	L Near	 000001D1 _TEXT	
  playAgain  . . . . . . . . . .	L Near	 000001FE _TEXT	
  exit . . . . . . . . . . . . .	L Near	 00000232 _TEXT	
  gameOver . . . . . . . . . . .	L Near	 00000233 _TEXT	
  invalidInputError  . . . . . .	L Near	 0000023F _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
cardArray  . . . . . . . . . . .	Byte	 000001B7 _DATA	
charCount  . . . . . . . . . . .	L Near	 00000000 FLAT	External
columnBombs  . . . . . . . . . .	Byte	 000001F8 _DATA	
columnPrompt . . . . . . . . . .	Byte	 00000034 _DATA	
columnTotals . . . . . . . . . .	Byte	 000001F3 _DATA	
faceDown . . . . . . . . . . . .	Byte	 000001FD _DATA	
facingArray  . . . . . . . . . .	Byte	 000001D0 _DATA	
finalDialog  . . . . . . . . . .	Byte	 0000010A _DATA	
finalTerm  . . . . . . . . . . .	Byte	 000000F5 _DATA	
gameBackSpacer . . . . . . . . .	Byte	 00000170 _DATA	
gameFrontSpacer  . . . . . . . .	Byte	 0000016C _DATA	
gameLoopDialog . . . . . . . . .	Byte	 0000006B _DATA	
gameOverDialog . . . . . . . . .	Byte	 000000C0 _DATA	
gameRowBombs . . . . . . . . . .	Byte	 00000174 _DATA	
gameRowBottom  . . . . . . . . .	Byte	 0000017C _DATA	
gameRowTop . . . . . . . . . . .	Byte	 00000138 _DATA	
gameRowTotalAppend . . . . . . .	Byte	 00000169 _DATA	
gameTop  . . . . . . . . . . . .	Byte	 0000010E _DATA	
invalidInputDialog . . . . . . .	Byte	 0000009C _DATA	
playAgainDialog  . . . . . . . .	Byte	 000000CE _DATA	
printString  . . . . . . . . . .	L Near	 00000000 FLAT	External
readline . . . . . . . . . . . .	L Near	 00000000 FLAT	External
rowBombs . . . . . . . . . . . .	Byte	 000001EE _DATA	
rowPrompt  . . . . . . . . . . .	Byte	 00000000 _DATA	
rowTotals  . . . . . . . . . . .	Byte	 000001E9 _DATA	
victorySpeech  . . . . . . . . .	Byte	 000001A8 _DATA	
writeNumber  . . . . . . . . . .	L Near	 00000000 FLAT	External
writeline  . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
