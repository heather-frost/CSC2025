Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/09/24 11:31:43
gameLoop.asm						     Page 1 - 1


				; Main Console program
				; Spencer Medberry
				; 1 November 2024
				; gameLoop adapted from fibonacci counter

				; Register usage:
				;     EAX - readWrite procedure communication
				;     EBX - integer user input result for term counting
				;     ECX - helper register: char storage during ASCII conversion

				.model flat

				extern writeline: near
				extern readline: near
				extern charCount: near
				extern writeNumber: near

 00000000			.data

				; both end with 0 to terminate the string
 00000000 4F 70 65 6E 69	prompt              byte  "Opening gameLoop prompt here: OLD PROMPT: Enter a number between 1 and 45: ", 0
	   6E 67 20 67 61
	   6D 65 4C 6F 6F
	   70 20 70 72 6F
	   6D 70 74 20 68
	   65 72 65 3A 20
	   4F 4C 44 20 50
	   52 4F 4D 50 54
	   3A 20 45 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 62 65 74
	   77 65 65 6E 20
	   31 20 61 6E 64
	   20 34 35 3A 20
	   00
				; beginning with 10 sends a line feed character before the text
 0000004C 0A 53 74 61 72	gameLoopDialog     byte  10,"Starting with 1 and 2, the terms produced are: ",0
	   74 69 6E 67 20
	   77 69 74 68 20
	   31 20 61 6E 64
	   20 32 2C 20 74
	   68 65 20 74 65
	   72 6D 73 20 70
	   72 6F 64 75 63
	   65 64 20 61 72
	   65 3A 20 00
 0000007D 50 6C 65 61 73	invalidInputDialog    byte  "Please enter a valid input.",10,10,0
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 69 64
	   20 69 6E 70 75
	   74 2E 0A 0A 00
 0000009B 59 6F 75 20 62	gameOverDialog      byte    "You blew up!",10,10,0
	   6C 65 77 20 75
	   70 21 0A 0A 00
 000000AA 0A 0A 54 68 65	finalTerm           byte  10,10,"The value of term ",0
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 65 72 6D 20
	   00
 000000BF 69 73 20		finalDialog         byte  "is "

 00000000			.code

				;; Call gameLoop() - No Parameters, no return value
 00000000			gameLoop PROC near
 00000000			_gameLoop:

 00000000			Setup:
				;GAME SETUP GOES HERE

 00000000			gameLoopStart:
				    ; DISPLAY GAME STATE
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 00000000  68 00000000 R	    push  offset prompt
 00000005  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 0000000A  50			    push  eax
 0000000B  68 00000000 R	    push  offset prompt
 00000010  E8 00000000 E	    call  writeline

				    ; ACCEPT USER INPUT
				        ;; Call readline() - No Parameters, Returns ptr to buffer in eax
 00000015  E8 00000000 E	    call  readline
				    ; user input stored in eax
				    
				    ;convert user input from ASCII to integer
 0000001A  B9 00000000		    mov   ecx,0
 0000001F  BB 00000000		    mov   ebx,0
 00000024			ASCIIloop:
 00000024  8A 08		    mov  cl,[eax]                   ; Look at the character in the string
 00000026  83 F9 0D		    cmp  ecx,13                     ; check for carriage return.
 00000029  74 15		    je numberGet
 0000002B  83 F9 0A		    cmp  ecx,10                     ; check for line feed.
 0000002E  74 10		    je numberGet
 00000030  83 F9 00		    cmp  ecx,0                      ; check for end of string.
 00000033  74 0B		    je numberGet
 00000035  80 E9 30		    sub  cl,'0'
 00000038  6B DB 0A		    imul ebx,10
 0000003B  03 D9		    add  ebx,ecx
 0000003D  40			    inc  eax                        ; go to next letter
 0000003E  EB E4		    jmp  ASCIIloop
 00000040			numberGet:
 00000040  83 FB 2D		    cmp ebx,45
 00000043  0F 8F 00000080	    jg invalidInputError
 00000049  83 FB 01		    cmp ebx,1
 0000004C  7C 7B		    jl invalidInputError

 0000004E			random:
 0000004E  B4 00		   MOV AH, 00h  ; get system time

 00000050  66| 8B C2		   mov  ax, dx
 00000053  66| 33 D2		   xor  dx, dx
 00000056  66| B9 000A		   mov  cx, 10    
 0000005A  66| F7 F1		   div  cx       ; here dx contains [0-9] remainder of division

 0000005D  66| 8B C2		   mov ax, dx
 00000060  66| 33 D2		   xor dx, dx
 00000063  66| B9 0002		   mov cx, 2
 00000067  66| F7 F1		   div cx       ; ax now contains [0-4]

 0000006A  66| 83 F8 04		   cmp ax, 4
 0000006E  74 DE		   je random

 00000070  66| 8B D0		   mov dx, ax
 00000073  B8 00000000		   mov eax, 0
 00000078  66| 03 C2		   add ax, dx

				    

				;VICTORY
 0000007B  50			    push eax    ;2nd writeNumber parameter
 0000007C  53			    push ebx    ;1st writeNumber parameter
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 0000007D  68 000000AA R	    push  offset finalTerm
 00000082  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 00000087  50			    push  eax
 00000088  68 000000AA R	    push  offset finalTerm
 0000008D  E8 00000000 E	    call  writeline
				        ;; Call writeNumber(number) - print the ASCII value of a number.
				        ;; Parameter: number is number to be converted to Ascii and printed.
				        ;; Returns nothing
 00000092  E8 00000000 E	    call  writeNumber
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 00000097  68 000000BF R	    push  offset finalDialog
 0000009C  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 000000A1  50			    push  eax
 000000A2  68 000000BF R	    push  offset finalDialog
 000000A7  E8 00000000 E	    call  writeline
				        ;; Call writeNumber(number) - print the ASCII value of a number.
				        ;; Parameter: number is number to be converted to Ascii and printed.
				        ;; Returns nothing
 000000AC  E8 00000000 E	    call  writeNumber

 000000B1			playAgain:
				    
 000000B1			exit:
 000000B1  C3			    ret     ; Return to the main program.

 000000B2			gameOver:
				    ; Print gameOverDialog
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 000000B2  68 0000009B R	    push  offset gameOverDialog
 000000B7  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 000000BC  50			    push  eax
 000000BD  68 0000009B R	    push  offset gameOverDialog
 000000C2  E8 00000000 E	    call  writeline
 000000C7  EB E8		    jmp playAgain
				; End gameOver

 000000C9			invalidInputError:
				    ; Print invalidInputDialog
				        ;; Call charCount(addr)
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;; Returns character count in eax
 000000C9  68 0000007D R	    push  offset invalidInputDialog
 000000CE  E8 00000000 E	    call  charCount
				        ;; Call writeline(addr, chars) - push parameter in reverse order
				        ;; Parameters: addr is address of buffer = &addr[0]
				        ;;             chars is the character count in the buffer
				        ;; Returns nothing
 000000D3  50			    push  eax
 000000D4  68 0000007D R	    push  offset invalidInputDialog
 000000D9  E8 00000000 E	    call  writeline
 000000DE  E9 FFFFFF1D		    jmp _gameLoop
				; End invalidInputError
				    
 000000E3			gameLoop ENDP
				END
Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/09/24 11:31:43
gameLoop.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000000C2 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000E3 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

gameLoop . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E3 Public
  _gameLoop  . . . . . . . . . .	L Near	 00000000 _TEXT	
  Setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  gameLoopStart  . . . . . . . .	L Near	 00000000 _TEXT	
  ASCIIloop  . . . . . . . . . .	L Near	 00000024 _TEXT	
  numberGet  . . . . . . . . . .	L Near	 00000040 _TEXT	
  random . . . . . . . . . . . .	L Near	 0000004E _TEXT	
  playAgain  . . . . . . . . . .	L Near	 000000B1 _TEXT	
  exit . . . . . . . . . . . . .	L Near	 000000B1 _TEXT	
  gameOver . . . . . . . . . . .	L Near	 000000B2 _TEXT	
  invalidInputError  . . . . . .	L Near	 000000C9 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
charCount  . . . . . . . . . . .	L Near	 00000000 FLAT	External
finalDialog  . . . . . . . . . .	Byte	 000000BF _DATA	
finalTerm  . . . . . . . . . . .	Byte	 000000AA _DATA	
gameLoopDialog . . . . . . . . .	Byte	 0000004C _DATA	
gameOverDialog . . . . . . . . .	Byte	 0000009B _DATA	
invalidInputDialog . . . . . . .	Byte	 0000007D _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000000 _DATA	
readline . . . . . . . . . . . .	L Near	 00000000 FLAT	External
writeNumber  . . . . . . . . . .	L Near	 00000000 FLAT	External
writeline  . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
