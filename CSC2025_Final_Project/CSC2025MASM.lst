Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/20/24 12:01:28
gameLoop.asm						     Page 1 - 1


				; Main Console program
				; Spencer Medberry
				; 1 November 2024
				; gameLoop adapted from fibonacci counter

				; Register usage:
				;     EAX - external routine communication
				;     EBX - 
				;     ECX - 

				.model flat

				extern writeline: near
				extern readline: near
				extern charCount: near
				extern writeNumber: near
				extern printString: near

 00000000			.data

 00000000 57 68 69 63 68	rowPrompt              byte  "Which row would you like to flip a card in? [1-5]: ", 0
	   20 72 6F 77 20
	   77 6F 75 6C 64
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 66 6C
	   69 70 20 61 20
	   63 61 72 64 20
	   69 6E 3F 20 5B
	   31 2D 35 5D 3A
	   20 00
 00000034 57 68 69 63 68	columnPrompt              byte  "Which column would you like to flip a card in? [1-5]: ", 0
	   20 63 6F 6C 75
	   6D 6E 20 77 6F
	   75 6C 64 20 79
	   6F 75 20 6C 69
	   6B 65 20 74 6F
	   20 66 6C 69 70
	   20 61 20 63 61
	   72 64 20 69 6E
	   3F 20 5B 31 2D
	   35 5D 3A 20 00
 0000006B 0A 53 74 61 72	gameLoopDialog     byte  10,"Starting with 1 and 2, the terms produced are: ",0
	   74 69 6E 67 20
	   77 69 74 68 20
	   31 20 61 6E 64
	   20 32 2C 20 74
	   68 65 20 74 65
	   72 6D 73 20 70
	   72 6F 64 75 63
	   65 64 20 61 72
	   65 3A 20 00

 0000009C 50 6C 65 61 73	invalidInputDialog    byte  "Please enter a valid [1-5] input.",10,10,0
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 69 64
	   20 5B 31 2D 35
	   5D 20 69 6E 70
	   75 74 2E 0A 0A
	   00

 000000C0 0A 59 6F 75 20	gameOverDialog      byte    10,"You blew up!",0
	   62 6C 65 77 20
	   75 70 21 00
 000000CE 0A 0A 57 6F 75	playAgainDialog     byte    10,10,"Would you like to play again? [y/n] ",0
	   6C 64 20 79 6F
	   75 20 6C 69 6B
	   65 20 74 6F 20
	   70 6C 61 79 20
	   61 67 61 69 6E
	   3F 20 5B 79 2F
	   6E 5D 20 00
 000000F5 0A 0A 54 68 65	finalTerm           byte  10,10,"The value of term ",0
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 65 72 6D 20
	   00
 0000010A 69 73 20 00		finalDialog         byte  "is ",0

 0000010E 20 5F 5F 5F 5F	gameTop             byte  " _____________________________", 10,0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   0A 00
 0000012E 7C 20 20 20 20	gameRowTop          byte  "|     |     |     |     |     |", 10, "|",0
	   20 7C 20 20 20
	   20 20 7C 20 20
	   20 20 20 7C 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   7C 0A 7C 00
 00000150 20 20 00		gameFrontSpacer       byte  "  ",0
 00000153 20 7C 00		gameBackSpacer       byte  " |",0
 00000156 0A 7C 5F 5F 5F	gameRowBottom       byte  10,"|_____|_____|_____|_____|_____|", 10,0
	   5F 5F 7C 5F 5F
	   5F 5F 5F 7C 5F
	   5F 5F 5F 5F 7C
	   5F 5F 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 7C 0A 00

 00000178 0A 0A 56 49 43	victorySpeech             byte 10,10,"VICTORY!!!",10,10,0
	   54 4F 52 59 21
	   21 21 0A 0A 00

 00000187  00000019 [		cardArray db 25 dup(?)
	    00
	   ]
 000001A0  00000019 [		facingArray db 25 dup(0)
	    00
	   ]

 000001B9 3F 20 00		faceDown    byte "? ",0


 00000000			.code

				;; Call gameLoop() - No Parameters, no return value
 00000000			gameLoop PROC near
 00000000			_gameLoop:

 00000000			Setup:
				; populates cardArray w/ [0-3]
 00000000  BB 00000000		   mov ebx, 0
 00000005			StaticPopulationLoop:
 00000005  0F C7 F0		   RDRAND EAX

 00000008  66| 33 D2		   xor  dx, dx
 0000000B  66| B9 000A		   mov  cx, 10    
 0000000F  66| F7 F1		   div  cx       ; dx now contains [0-9] remainder of division

 00000012  66| 8B C2		   mov ax, dx
 00000015  66| 33 D2		   xor dx, dx
 00000018  66| B9 0002		   mov cx, 2
 0000001C  66| F7 F1		   div cx       ; ax now contains [0-4]

 0000001F  66| 83 F8 04		   cmp ax, 4
 00000023  74 E0		   je StaticPopulationLoop    ; don't want 4s
				   
 00000025  66| 8B D0		   mov dx, ax
 00000028  B8 00000000		   mov eax, 0
 0000002D  66| 03 C2		   add ax, dx  ;random [0-3] is in eax

 00000030  88 83 00000187 R	   mov [cardArray+ebx], al
 00000036  83 C3 01		   add ebx, 1
 00000039  83 FB 1A		   cmp ebx, 26
 0000003C  7C C7		   jl StaticPopulationLoop
 0000003E  C6 05 000001A0 R	   mov [facingArray], 0
	   00


 00000045			gameLoopStart:
				    ; DISPLAY GAME STATE
 00000045  68 0000010E R	    push offset gameTop
 0000004A  E8 00000000 E	    call printString
 0000004F  B9 00000000		    mov ecx, 0
 00000054			    printLoop:
 00000054  51			        push ecx
 00000055  68 0000012E R	        push offset gameRowTop
 0000005A  E8 00000000 E	        call printString
 0000005F  59			        pop ecx
 00000060  8B D1		        mov edx, ecx
 00000062  83 C2 05		        add edx, 5
 00000065  52			        push edx
 00000066			        printSubLoop:
 00000066  52			            push edx
 00000067  51			            push ecx
 00000068  68 00000150 R	            push offset gameFrontSpacer
 0000006D  E8 00000000 E	            call printString
 00000072  59			            pop ecx
 00000073  51			            push ecx
 00000074  BB 00000000		            mov ebx, 0
 00000079  8A 99 000001A0 R	            mov bl, [facingArray+ecx]
 0000007F  83 FB 00		            cmp ebx, 0
 00000082  7F 0C		            jg faceup

 00000084  68 000001B9 R	            push offset faceDown
 00000089  E8 00000000 E	            call printString
 0000008E  EB 0C		            jmp facingDone

 00000090			            faceup:
 00000090  8A 99 00000187 R	            mov bl, [cardArray+ecx]
 00000096  53			            push ebx
 00000097  E8 00000000 E	            call writeNumber

 0000009C			            facingDone:
 0000009C  68 00000153 R	            push offset gameBackSpacer
 000000A1  E8 00000000 E	            call printString
 000000A6  59			            pop ecx
 000000A7  83 C1 01		            add ecx, 1
 000000AA  5A			            pop edx
 000000AB  3B CA		            cmp ecx, edx
 000000AD  7D 02		            jge endPrintSubLoop
 000000AF  EB B5		            jmp printSubLoop
 000000B1			        endPrintSubLoop:
 000000B1  5A			        pop edx
 000000B2  51			        push ecx
 000000B3  68 00000156 R	        push offset gameRowBottom
 000000B8  E8 00000000 E	        call printString
 000000BD  59			        pop ecx
 000000BE  83 F9 19		        cmp ecx, 25
 000000C1  7C 91		        jl printLoop
				    ;end printLoop

				    ;Guess Input:Row
 000000C3  68 00000000 R	    push  offset rowPrompt
 000000C8  E8 00000000 E	    call  printString
 000000CD  E8 00000000 E	    call  readline
				    
				    ;convert user input from ASCII to integer
 000000D2  B9 00000000		    mov   ecx,0
 000000D7  BB 00000000		    mov   ebx,0

 000000DC  8A 08		    mov  cl,[eax]                   ; Look at the character in the string
 000000DE  80 E9 30		    sub  cl,'0'
 000000E1  03 D9		    add  ebx,ecx

 000000E3  83 FB 05		    cmp ebx,5
 000000E6  0F 8F 000000F5	    jg invalidInputError
 000000EC  83 FB 01		    cmp ebx,1
 000000EF  0F 8C 000000EC	    jl invalidInputError
 000000F5  53			    push ebx

				    ;Guess Input: Column
 000000F6  68 00000034 R	    push  offset columnPrompt
 000000FB  E8 00000000 E	    call  printString
 00000100  E8 00000000 E	    call  readline
				    
				    ;convert user input from ASCII to integer
 00000105  B9 00000000		    mov   ecx,0
 0000010A  5B			    pop   ebx
 0000010B  83 EB 01		    sub  ebx, 1
 0000010E  6B DB 05		    imul ebx, 5

 00000111  8A 08		    mov  cl,[eax]                   ; Look at the character in the string
 00000113  80 E9 30		    sub  cl,'0'

 00000116  83 F9 05		    cmp ecx,5
 00000119  0F 8F 000000C2	    jg invalidInputError
 0000011F  83 F9 01		    cmp ecx,1
 00000122  0F 8C 000000B9	    jl invalidInputError
 00000128  03 D9		    add  ebx,ecx

				;gameover check
 0000012A  B8 00000000		    mov  eax, 0
 0000012F  83 EB 01		    sub  ebx, 1
 00000132  8A 83 00000187 R	    mov  al, [cardArray+ebx]
 00000138  C6 83 000001A0 R	    mov  [facingArray+ebx], 1
	   01
 0000013F  83 F8 00		    cmp  eax,0
 00000142  0F 84 0000008D	    je   gameOver

 00000148  B9 00000000		    mov ecx, 0
 0000014D			victoryCheck:
 0000014D  0F B6 81		    movzx eax, byte ptr [facingArray+ecx]
	   000001A0 R
 00000154  83 F8 01		    cmp eax, 1
 00000157  74 10		    je victoryCheckContinue
 00000159  0F B6 81		    movzx eax, byte ptr [cardArray+ecx]
	   00000187 R
 00000160  83 F8 02		    cmp eax, 2
 00000163  0F 8D FFFFFEDC	    jge gameLoopStart
 00000169			victoryCheckContinue:
 00000169  83 C1 01		    add ecx, 1
 0000016C  83 F9 19		    cmp ecx, 25
 0000016F  7D 02		    jge victory
 00000171  EB DA		    jmp victoryCheck

 00000173			victory:
 00000173  50			    push eax    ;2nd writeNumber parameter
 00000174  83 C3 01		    add  ebx, 1
 00000177  53			    push ebx    ;1st writeNumber parameter
 00000178  68 000000F5 R	    push  offset finalTerm
 0000017D  E8 00000000 E	    call  printString

 00000182  E8 00000000 E	    call  writeNumber

 00000187  68 0000010A R	    push  offset finalDialog
 0000018C  E8 00000000 E	    call  printString

 00000191  E8 00000000 E	    call  writeNumber

 00000196  68 00000178 R	    push offset victorySpeech
 0000019B  E8 00000000 E	    call printString


 000001A0			playAgain:
 000001A0  68 000000CE R	    push  offset playAgainDialog
 000001A5  E8 00000000 E	    call  printString

 000001AA  E8 00000000 E	    call  readline
				    
				    ; Look at the character in the string
 000001AF  B9 00000000		    mov   ecx,0
 000001B4  8A 08		    mov  cl,[eax]

 000001B6  83 F9 6E		    cmp ecx, 110
 000001B9  74 19		    je exit
 000001BB  83 F9 4E		    cmp ecx, 78
 000001BE  74 14		    je exit
 000001C0  83 F9 79		    cmp ecx, 121
 000001C3  0F 84 FFFFFE7C	    je gameLoopStart
 000001C9  83 F9 59		    cmp ecx, 89
 000001CC  0F 84 FFFFFE73	    je gameLoopStart
 000001D2  EB CC		    jmp playAgain
				     
 000001D4			exit:
 000001D4  C3			    ret     ; Return to the main program.

 000001D5			gameOver:
				    ; Print gameOverDialog
 000001D5  68 000000C0 R	    push  offset gameOverDialog
 000001DA  E8 00000000 E	    call  printString
 000001DF  EB BF		    jmp playAgain
				; End gameOver

 000001E1			invalidInputError:
				    ; Print invalidInputDialog
 000001E1  68 0000009C R	    push  offset invalidInputDialog
 000001E6  E8 00000000 E	    call  printString
 000001EB  E9 FFFFFE55		    jmp gameLoopStart
				; End invalidInputError
				    
 000001F0			gameLoop ENDP
				END
Microsoft (R) Macro Assembler Version 14.41.34120.0	    11/20/24 12:01:28
gameLoop.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000001BC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001F0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

gameLoop . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001F0 Public
  _gameLoop  . . . . . . . . . .	L Near	 00000000 _TEXT	
  Setup  . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  StaticPopulationLoop . . . . .	L Near	 00000005 _TEXT	
  gameLoopStart  . . . . . . . .	L Near	 00000045 _TEXT	
  printLoop  . . . . . . . . . .	L Near	 00000054 _TEXT	
  printSubLoop . . . . . . . . .	L Near	 00000066 _TEXT	
  faceup . . . . . . . . . . . .	L Near	 00000090 _TEXT	
  facingDone . . . . . . . . . .	L Near	 0000009C _TEXT	
  endPrintSubLoop  . . . . . . .	L Near	 000000B1 _TEXT	
  victoryCheck . . . . . . . . .	L Near	 0000014D _TEXT	
  victoryCheckContinue . . . . .	L Near	 00000169 _TEXT	
  victory  . . . . . . . . . . .	L Near	 00000173 _TEXT	
  playAgain  . . . . . . . . . .	L Near	 000001A0 _TEXT	
  exit . . . . . . . . . . . . .	L Near	 000001D4 _TEXT	
  gameOver . . . . . . . . . . .	L Near	 000001D5 _TEXT	
  invalidInputError  . . . . . .	L Near	 000001E1 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
cardArray  . . . . . . . . . . .	Byte	 00000187 _DATA	
charCount  . . . . . . . . . . .	L Near	 00000000 FLAT	External
columnPrompt . . . . . . . . . .	Byte	 00000034 _DATA	
faceDown . . . . . . . . . . . .	Byte	 000001B9 _DATA	
facingArray  . . . . . . . . . .	Byte	 000001A0 _DATA	
finalDialog  . . . . . . . . . .	Byte	 0000010A _DATA	
finalTerm  . . . . . . . . . . .	Byte	 000000F5 _DATA	
gameBackSpacer . . . . . . . . .	Byte	 00000153 _DATA	
gameFrontSpacer  . . . . . . . .	Byte	 00000150 _DATA	
gameLoopDialog . . . . . . . . .	Byte	 0000006B _DATA	
gameOverDialog . . . . . . . . .	Byte	 000000C0 _DATA	
gameRowBottom  . . . . . . . . .	Byte	 00000156 _DATA	
gameRowTop . . . . . . . . . . .	Byte	 0000012E _DATA	
gameTop  . . . . . . . . . . . .	Byte	 0000010E _DATA	
invalidInputDialog . . . . . . .	Byte	 0000009C _DATA	
playAgainDialog  . . . . . . . .	Byte	 000000CE _DATA	
printString  . . . . . . . . . .	L Near	 00000000 FLAT	External
readline . . . . . . . . . . . .	L Near	 00000000 FLAT	External
rowPrompt  . . . . . . . . . . .	Byte	 00000000 _DATA	
victorySpeech  . . . . . . . . .	Byte	 00000178 _DATA	
writeNumber  . . . . . . . . . .	L Near	 00000000 FLAT	External
writeline  . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
